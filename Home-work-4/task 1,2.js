//1. Укажи с объяснением в комментариях что выведет каждое выражение.

console.log(
  2 + "2" == "2" + 2
); /*("22" == "22") true, спочатку до числа 2 додається рядок "2", відбувається  конкатенація і  приведення числа в рядок, результат рядок "22",
справа де до рядка "2" додається число 2, результат рядок "22"  */

console.log(2 + "3" == "3" + 2); // ("23" == "32") false, зліва і справа відбувається конкатенація

console.log(
  "3" + "2" == 3 + 2
); /* ("32" == 5 ) false, зліва конкатенація, справа додається 2 числа, так як  порівнюємо рядку і числове значення при порівнянні відбувається перетворення рядку "32" в число 32, 32 !== 5 буде false*/

console.log("3" + "2" == "3" + 2); // ("32" == "32") true, зліва і справа відбувається конкатенація

console.log("3" + "2" == 2 + "3"); // ("32" == "23") false, зліва і справа відбувається конкатенація

console.log(
  2 + Number("3") == Number("3") + 2
); /*(5 == 5 ) true, зліва і справа Number("3")- приводить рядок в числове значення */

console.log(
  12 / "6"
); /* 2,  при діленню (/) числа 12 на рядок "6" відбувається приведення рядка "6" до числового значення буде вираз 12/6 = 2*/

console.log(
  "number" + 15 + 3
); /* "number153", спочатку  до рядка "number" додається число 15, відбувається конкатенація і результат "number15" потім додається ще число 3 ("number15" + 3) відбуваєть конкатенація і результат "number153" */

console.log(
  15 + 3 + "number"
); /* "18number", спочатку відбувається додаваня двох чисел 15 + 3 = 18, далі 18 + "number", конкатенація і результат "18number" */

console.log(
  [1] > null
); /* (1 > 0) true, оператор зліва - обєкт, тому здійснюється приведення до примітиву, при порівнянні двох різних типів даних, буде їх спільне приведення до числа, зліва буде 1 , справа 0*/

console.log(
  "foo" + +"bar"
); /* "fooNaN", так як між операторами + немає жодного значення, то спочатку здійснюється операція приведення до числа     +"bar" = NaN,  далі конкатенація і результат  "foo" + NaN = "fooNaN" */

console.log(
  "true" == true
); /* (NaN == 1) false,  при порівнянні різних типів відбувається приведення їх до числа, зліва буде NaN, справа 1  */

console.log(
  false == "false"
); /* (0 == NaN) false,  при порівнянні різних типів відбувається приведення їх до числа, зліва буде 0, справа NaN  */

console.log(
  null == ""
); /* false, перевірка на рівність null є тільки 2 випадки коли результат true це (null == null) та (null == undefined) в усих інших результат  false */

console.log(
  !!"false" == !!"true"
); /* (true == true) true, оператор !! приводить до булевого типу, так як у на зліва і справа не пустий рядок, то під час перетворення в них обох буде true */

console.log(
  ["x"] == "x"
); /* ("x" == "x") true, зліва обєкт приводиться до примітиву, тоді ми порівнюємо 2 рядки  */

//Task 2

//2. Укажи с объяснением в комментариях что выведет каждое выражение.

const enemy = {
  name: "Bob",
};

const friend = {
  name: "Alex",
};

const me = friend;

me.name = "Bob";

console.log(
  friend.name
); /* Bob, тому що коли ми const me присвоїли посилання на friend, а далі для ключа name перезаписали значення на "Bob" і тепер у const friend та me з ключем name є значення "Bob" */

console.log(me === friend); // true, так як це одне посилання, і для нього виділене одне місце в памяті

console.log(me === enemy); // false, хоча ці два обєкта схожі, але це два різних посилання і мають різні місця в памяті
